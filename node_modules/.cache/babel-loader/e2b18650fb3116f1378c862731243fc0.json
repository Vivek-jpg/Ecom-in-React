{"ast":null,"code":"import _objectSpread from\"F:/website 2020/Ecom-in-React/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{Response}from\"miragejs\";import{formatDate,requiresAuth}from\"../utils/authUtils\";/**\n * All the routes related to Cart are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */ /**\n * This handler handles getting items to user's cart.\n * send GET Request at /api/user/cart\n * */export var getCartItemsHandler=function getCartItemsHandler(schema,request){var userId=requiresAuth.call(this,request);if(!userId){new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;return new Response(200,{},{cart:userCart});};/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart\n * body contains {product}\n * */export var addItemToCartHandler=function addItemToCartHandler(schema,request){var userId=requiresAuth.call(this,request);try{if(!userId){new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;var _JSON$parse=JSON.parse(request.requestBody),product=_JSON$parse.product;userCart.push(_objectSpread(_objectSpread({},product),{},{createdAt:formatDate(),updatedAt:formatDate(),qty:1}));this.db.users.update({_id:userId},{cart:userCart});return new Response(201,{},{cart:userCart});}catch(error){return new Response(500,{},{error:error});}};/**\n * This handler handles removing items to user's cart.\n * send DELETE Request at /api/user/cart/:productId\n * */export var removeItemFromCartHandler=function removeItemFromCartHandler(schema,request){var userId=requiresAuth.call(this,request);try{if(!userId){new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;var productId=request.params.productId;userCart=userCart.filter(function(item){return item._id!==productId;});this.db.users.update({_id:userId},{cart:userCart});return new Response(200,{},{cart:userCart});}catch(error){return new Response(500,{},{error:error});}};/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart/:productId\n * body contains {action} (whose 'type' can be increment or decrement)\n * */export var updateCartItemHandler=function updateCartItemHandler(schema,request){var productId=request.params.productId;var userId=requiresAuth.call(this,request);try{if(!userId){new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;var _JSON$parse2=JSON.parse(request.requestBody),action=_JSON$parse2.action;if(action.type===\"increment\"){userCart.forEach(function(product){if(product._id===productId){product.qty+=1;product.updatedAt=formatDate();}});}else if(action.type===\"decrement\"){userCart.forEach(function(product){if(product._id===productId){product.qty-=1;product.updatedAt=formatDate();}});}this.db.users.update({_id:userId},{cart:userCart});return new Response(200,{},{cart:userCart});}catch(error){return new Response(500,{},{error:error});}};","map":{"version":3,"sources":["F:/website 2020/Ecom-in-React/src/backend/controllers/CartController.js"],"names":["Response","formatDate","requiresAuth","getCartItemsHandler","schema","request","userId","call","errors","userCart","users","findBy","_id","cart","addItemToCartHandler","JSON","parse","requestBody","product","push","createdAt","updatedAt","qty","db","update","error","removeItemFromCartHandler","productId","params","filter","item","updateCartItemHandler","action","type","forEach"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Cart are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's cart.\n * send GET Request at /api/user/cart\n * */\nexport const getCartItemsHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  if (!userId) {\n    new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userCart = schema.users.findBy({ _id: userId }).cart;\n  return new Response(200, {}, { cart: userCart });\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart\n * body contains {product}\n * */\n\nexport const addItemToCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { product } = JSON.parse(request.requestBody);\n    userCart.push({\n      ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1,\n    });\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(201, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing items to user's cart.\n * send DELETE Request at /api/user/cart/:productId\n * */\n\nexport const removeItemFromCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userCart = schema.users.findBy({ _id: userId }).cart;\n    const productId = request.params.productId;\n    userCart = userCart.filter((item) => item._id !== productId);\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart/:productId\n * body contains {action} (whose 'type' can be increment or decrement)\n * */\n\nexport const updateCartItemHandler = function (schema, request) {\n  const productId = request.params.productId;\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { action } = JSON.parse(request.requestBody);\n    if (action.type === \"increment\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}