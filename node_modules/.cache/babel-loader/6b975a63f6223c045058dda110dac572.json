{"ast":null,"code":"import{Response}from\"miragejs\";import dayjs from\"dayjs\";import jwt_decode from\"jwt-decode\";export var requiresAuth=function requiresAuth(request){var encodedToken=request.requestHeaders.authorization;var decodedToken=jwt_decode(encodedToken,process.env.REACT_APP_JWT_SECRET);if(decodedToken){var user=this.db.users.findBy({email:decodedToken.email});if(user){return user._id;}}return new Response(401,{},{errors:[\"The token is invalid. Unauthorized access error.\"]});};export var formatDate=function formatDate(){return dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\");};","map":{"version":3,"sources":["F:/website 2020/Ecom-in-React/src/backend/utils/authUtils.js"],"names":["Response","dayjs","jwt_decode","requiresAuth","request","encodedToken","requestHeaders","authorization","decodedToken","process","env","REACT_APP_JWT_SECRET","user","db","users","findBy","email","_id","errors","formatDate","format"],"mappings":"AAAA,OAASA,QAAT,KAAyB,UAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAUC,OAAV,CAAmB,CAC7C,GAAMC,CAAAA,YAAY,CAAGD,OAAO,CAACE,cAAR,CAAuBC,aAA5C,CACA,GAAMC,CAAAA,YAAY,CAAGN,UAAU,CAC7BG,YAD6B,CAE7BI,OAAO,CAACC,GAAR,CAAYC,oBAFiB,CAA/B,CAIA,GAAIH,YAAJ,CAAkB,CAChB,GAAMI,CAAAA,IAAI,CAAG,KAAKC,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB,CAAEC,KAAK,CAAER,YAAY,CAACQ,KAAtB,CAArB,CAAb,CACA,GAAIJ,IAAJ,CAAU,CACR,MAAOA,CAAAA,IAAI,CAACK,GAAZ,CACD,CACF,CACD,MAAO,IAAIjB,CAAAA,QAAJ,CACL,GADK,CAEL,EAFK,CAGL,CAAEkB,MAAM,CAAE,CAAC,kDAAD,CAAV,CAHK,CAAP,CAKD,CAjBM,CAmBP,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAMlB,CAAAA,KAAK,GAAGmB,MAAR,CAAe,sBAAf,CAAN,EAAnB","sourcesContent":["import { Response } from \"miragejs\";\nimport dayjs from \"dayjs\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const requiresAuth = function (request) {\n  const encodedToken = request.requestHeaders.authorization;\n  const decodedToken = jwt_decode(\n    encodedToken,\n    process.env.REACT_APP_JWT_SECRET\n  );\n  if (decodedToken) {\n    const user = this.db.users.findBy({ email: decodedToken.email });\n    if (user) {\n      return user._id;\n    }\n  }\n  return new Response(\n    401,\n    {},\n    { errors: [\"The token is invalid. Unauthorized access error.\"] }\n  );\n};\n\nexport const formatDate = () => dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\");\n"]},"metadata":{},"sourceType":"module"}