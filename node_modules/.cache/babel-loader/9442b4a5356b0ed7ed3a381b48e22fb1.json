{"ast":null,"code":"import _objectSpread from\"F:/website 2020/Ecom-in-React/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"F:/website 2020/Ecom-in-React/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"email\",\"password\"];import{v4 as uuid}from\"uuid\";import{Response}from\"miragejs\";import{formatDate}from\"../utils/authUtils\";var sign=require(\"jwt-encode\");/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */ /**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, email, password}\n * */export var signupHandler=function signupHandler(schema,request){var _JSON$parse=JSON.parse(request.requestBody),email=_JSON$parse.email,password=_JSON$parse.password,rest=_objectWithoutProperties(_JSON$parse,_excluded);try{// check if email already exists\nvar foundUser=schema.users.findBy({email:email});if(foundUser){return new Response(422,{},{errors:[\"Unprocessable Entity. Email Already Exists.\"]});}var _id=uuid();var newUser=_objectSpread(_objectSpread({_id:_id,email:email,password:password,createdAt:formatDate(),updatedAt:formatDate()},rest),{},{cart:[],wishlist:[]});var createdUser=schema.users.create(newUser);var encodedToken=sign({_id:_id,email:email},process.env.REACT_APP_JWT_SECRET);return new Response(201,{},{createdUser:createdUser,encodedToken:encodedToken});}catch(error){return new Response(500,{},{error:error});}};/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {email, password}\n * */export var loginHandler=function loginHandler(schema,request){var _JSON$parse2=JSON.parse(request.requestBody),email=_JSON$parse2.email,password=_JSON$parse2.password;try{var foundUser=schema.users.findBy({email:email});if(!foundUser){return new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}if(password===foundUser.password){var encodedToken=sign({_id:foundUser._id,email:email},process.env.REACT_APP_JWT_SECRET);foundUser.password=undefined;return new Response(200,{},{foundUser:foundUser,encodedToken:encodedToken});}new Response(401,{},{errors:[\"The credentials you entered are invalid. Unauthorized access error.\"]});}catch(error){return new Response(500,{},{error:error});}};","map":{"version":3,"sources":["F:/website 2020/Ecom-in-React/src/backend/controllers/AuthController.js"],"names":["v4","uuid","Response","formatDate","sign","require","signupHandler","schema","request","JSON","parse","requestBody","email","password","rest","foundUser","users","findBy","errors","_id","newUser","createdAt","updatedAt","cart","wishlist","createdUser","create","encodedToken","process","env","REACT_APP_JWT_SECRET","error","loginHandler","undefined"],"mappings":"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","sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nconst sign = require(\"jwt-encode\");\n/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, email, password}\n * */\n\nexport const signupHandler = function (schema, request) {\n  const { email, password, ...rest } = JSON.parse(request.requestBody);\n  try {\n    // check if email already exists\n    const foundUser = schema.users.findBy({ email });\n    if (foundUser) {\n      return new Response(\n        422,\n        {},\n        {\n          errors: [\"Unprocessable Entity. Email Already Exists.\"],\n        }\n      );\n    }\n    const _id = uuid();\n    const newUser = {\n      _id,\n      email,\n      password,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      ...rest,\n      cart: [],\n      wishlist: [],\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign({ _id, email }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, { createdUser, encodedToken });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {email, password}\n * */\n\nexport const loginHandler = function (schema, request) {\n  const { email, password } = JSON.parse(request.requestBody);\n  try {\n    const foundUser = schema.users.findBy({ email });\n    if (!foundUser) {\n      return new Response(\n        404,\n        {},\n        { errors: [\"The email you entered is not Registered. Not Found error\"] }\n      );\n    }\n    if (password === foundUser.password) {\n      const encodedToken = sign(\n        { _id: foundUser._id, email },\n        process.env.REACT_APP_JWT_SECRET\n      );\n      foundUser.password = undefined;\n      return new Response(200, {}, { foundUser, encodedToken });\n    }\n    new Response(\n      401,\n      {},\n      {\n        errors: [\n          \"The credentials you entered are invalid. Unauthorized access error.\",\n        ],\n      }\n    );\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}