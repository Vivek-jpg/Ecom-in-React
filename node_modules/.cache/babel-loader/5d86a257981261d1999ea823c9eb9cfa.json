{"ast":null,"code":"import _objectSpread from\"F:/website 2020/Ecom-in-React/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{Response}from\"miragejs\";import{formatDate,requiresAuth}from\"../utils/authUtils\";/**\n * All the routes related to Wishlist are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */ /**\n * This handler handles getting items to user's wishlist.\n * send GET Request at /api/user/wishlist\n * */export var getWishlistItemsHandler=function getWishlistItemsHandler(schema,request){var userId=requiresAuth.call(this,request);if(!userId){new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userWishlist=schema.users.findBy({_id:userId}).wishlist;return new Response(200,{},{wishlist:userWishlist});};/**\n * This handler handles adding items to user's wishlist.\n * send POST Request at /api/user/wishlist\n * body contains {product}\n * */export var addItemToWishlistHandler=function addItemToWishlistHandler(schema,request){var userId=requiresAuth.call(this,request);try{if(!userId){new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userWishlist=schema.users.findBy({_id:userId}).wishlist;var _JSON$parse=JSON.parse(request.requestBody),product=_JSON$parse.product;userWishlist.push(_objectSpread(_objectSpread({},product),{},{createdAt:formatDate(),updatedAt:formatDate()}));this.db.users.update({_id:userId},{wishlist:userWishlist});return new Response(201,{},{wishlist:userWishlist});}catch(error){return new Response(500,{},{error:error});}};/**\n * This handler handles removing items to user's wishlist.\n * send DELETE Request at /api/user/wishlist\n * body contains {product}\n * */export var removeItemFromWishlistHandler=function removeItemFromWishlistHandler(schema,request){var userId=requiresAuth.call(this,request);try{if(!userId){new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userWishlist=schema.users.findBy({_id:userId}).wishlist;var productId=request.params.productId;userWishlist=userWishlist.filter(function(item){return item._id!==productId;});this.db.users.update({_id:userId},{wishlist:userWishlist});return new Response(200,{},{wishlist:userWishlist});}catch(error){return new Response(500,{},{error:error});}};","map":{"version":3,"sources":["F:/website 2020/Ecom-in-React/src/backend/controllers/WishlistController.js"],"names":["Response","formatDate","requiresAuth","getWishlistItemsHandler","schema","request","userId","call","errors","userWishlist","users","findBy","_id","wishlist","addItemToWishlistHandler","JSON","parse","requestBody","product","push","createdAt","updatedAt","db","update","error","removeItemFromWishlistHandler","productId","params","filter","item"],"mappings":"kHAAA,OAASA,QAAT,KAAyB,UAAzB,CACA,OAASC,UAAT,CAAqBC,YAArB,KAAyC,oBAAzC,CAEA;AACA;AACA;AACA;AACA,K,CAEA;AACA;AACA;AACA,KAEA,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAUC,MAAV,CAAkBC,OAAlB,CAA2B,CAChE,GAAMC,CAAAA,MAAM,CAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,CAAwBF,OAAxB,CAAf,CACA,GAAI,CAACC,MAAL,CAAa,CACX,GAAIN,CAAAA,QAAJ,CACE,GADF,CAEE,EAFF,CAGE,CACEQ,MAAM,CAAE,CAAC,0DAAD,CADV,CAHF,EAOD,CACD,GAAMC,CAAAA,YAAY,CAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB,CAAEC,GAAG,CAAEN,MAAP,CAApB,EAAqCO,QAA1D,CACA,MAAO,IAAIb,CAAAA,QAAJ,CAAa,GAAb,CAAkB,EAAlB,CAAsB,CAAEa,QAAQ,CAAEJ,YAAZ,CAAtB,CAAP,CACD,CAbM,CAeP;AACA;AACA;AACA;AACA,KAEA,MAAO,IAAMK,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAAUV,MAAV,CAAkBC,OAAlB,CAA2B,CACjE,GAAMC,CAAAA,MAAM,CAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,CAAwBF,OAAxB,CAAf,CACA,GAAI,CACF,GAAI,CAACC,MAAL,CAAa,CACX,GAAIN,CAAAA,QAAJ,CACE,GADF,CAEE,EAFF,CAGE,CACEQ,MAAM,CAAE,CAAC,0DAAD,CADV,CAHF,EAOD,CACD,GAAMC,CAAAA,YAAY,CAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB,CAAEC,GAAG,CAAEN,MAAP,CAApB,EAAqCO,QAA1D,CACA,gBAAoBE,IAAI,CAACC,KAAL,CAAWX,OAAO,CAACY,WAAnB,CAApB,CAAQC,OAAR,aAAQA,OAAR,CACAT,YAAY,CAACU,IAAb,gCACKD,OADL,MAEEE,SAAS,CAAEnB,UAAU,EAFvB,CAGEoB,SAAS,CAAEpB,UAAU,EAHvB,IAKA,KAAKqB,EAAL,CAAQZ,KAAR,CAAca,MAAd,CAAqB,CAAEX,GAAG,CAAEN,MAAP,CAArB,CAAsC,CAAEO,QAAQ,CAAEJ,YAAZ,CAAtC,EACA,MAAO,IAAIT,CAAAA,QAAJ,CAAa,GAAb,CAAkB,EAAlB,CAAsB,CAAEa,QAAQ,CAAEJ,YAAZ,CAAtB,CAAP,CACD,CAAC,MAAOe,KAAP,CAAc,CACd,MAAO,IAAIxB,CAAAA,QAAJ,CACL,GADK,CAEL,EAFK,CAGL,CACEwB,KAAK,CAALA,KADF,CAHK,CAAP,CAOD,CACF,CA9BM,CAgCP;AACA;AACA;AACA;AACA,KAEA,MAAO,IAAMC,CAAAA,6BAA6B,CAAG,QAAhCA,CAAAA,6BAAgC,CAAUrB,MAAV,CAAkBC,OAAlB,CAA2B,CACtE,GAAMC,CAAAA,MAAM,CAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,CAAwBF,OAAxB,CAAf,CACA,GAAI,CACF,GAAI,CAACC,MAAL,CAAa,CACX,GAAIN,CAAAA,QAAJ,CACE,GADF,CAEE,EAFF,CAGE,CACEQ,MAAM,CAAE,CAAC,0DAAD,CADV,CAHF,EAOD,CACD,GAAIC,CAAAA,YAAY,CAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB,CAAEC,GAAG,CAAEN,MAAP,CAApB,EAAqCO,QAAxD,CACA,GAAMa,CAAAA,SAAS,CAAGrB,OAAO,CAACsB,MAAR,CAAeD,SAAjC,CACAjB,YAAY,CAAGA,YAAY,CAACmB,MAAb,CAAoB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACjB,GAAL,GAAac,SAAvB,EAApB,CAAf,CACA,KAAKJ,EAAL,CAAQZ,KAAR,CAAca,MAAd,CAAqB,CAAEX,GAAG,CAAEN,MAAP,CAArB,CAAsC,CAAEO,QAAQ,CAAEJ,YAAZ,CAAtC,EACA,MAAO,IAAIT,CAAAA,QAAJ,CAAa,GAAb,CAAkB,EAAlB,CAAsB,CAAEa,QAAQ,CAAEJ,YAAZ,CAAtB,CAAP,CACD,CAAC,MAAOe,KAAP,CAAc,CACd,MAAO,IAAIxB,CAAAA,QAAJ,CACL,GADK,CAEL,EAFK,CAGL,CACEwB,KAAK,CAALA,KADF,CAHK,CAAP,CAOD,CACF,CA1BM","sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Wishlist are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's wishlist.\n * send GET Request at /api/user/wishlist\n * */\n\nexport const getWishlistItemsHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  if (!userId) {\n    new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n  return new Response(200, {}, { wishlist: userWishlist });\n};\n\n/**\n * This handler handles adding items to user's wishlist.\n * send POST Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const addItemToWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n    const { product } = JSON.parse(request.requestBody);\n    userWishlist.push({\n      ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n    });\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\n    return new Response(201, {}, { wishlist: userWishlist });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing items to user's wishlist.\n * send DELETE Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const removeItemFromWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n    const productId = request.params.productId;\n    userWishlist = userWishlist.filter((item) => item._id !== productId);\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\n    return new Response(200, {}, { wishlist: userWishlist });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}